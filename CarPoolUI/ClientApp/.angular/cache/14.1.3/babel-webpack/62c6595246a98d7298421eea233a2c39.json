{"ast":null,"code":"import _defineProperty from \"E:/saurabh-GIT/Task 9 CarPool/carpool/CarPoolUI/ClientApp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, Component, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"toast-component\", \"\"];\n\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nclass ToastContainerDirective {\n  constructor(el) {\n    _defineProperty(this, \"el\", void 0);\n\n    this.el = el;\n  }\n\n  getContainerElement() {\n    return this.el.nativeElement;\n  }\n\n}\n\n_defineProperty(ToastContainerDirective, \"\\u0275fac\", function ToastContainerDirective_Factory(t) {\n  return new (t || ToastContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n});\n\n_defineProperty(ToastContainerDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ToastContainerDirective,\n  selectors: [[\"\", \"toastContainer\", \"\"]],\n  exportAs: [\"toastContainer\"],\n  standalone: true\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastContainerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[toastContainer]',\n      exportAs: 'toastContainer',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\n\nclass ComponentPortal {\n  /** The type of the component that will be instantiated for attachment. */\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n\n  /** Injector used for the instantiation of the component. */\n  constructor(component, injector) {\n    _defineProperty(this, \"_attachedHost\", void 0);\n\n    _defineProperty(this, \"component\", void 0);\n\n    _defineProperty(this, \"viewContainerRef\", void 0);\n\n    _defineProperty(this, \"injector\", void 0);\n\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n\n\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n\n\n  detach() {\n    const host = this._attachedHost;\n\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n\n\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n\n\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\n\n\nclass BasePortalHost {\n  constructor() {\n    _defineProperty(this, \"_attachedPortal\", void 0);\n\n    _defineProperty(this, \"_disposeFn\", void 0);\n  }\n\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n\n    if (this._disposeFn) {\n      this._disposeFn();\n\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n\n}\n/**\n * Reference to a toast opened via the Toastr service.\n */\n\n\nclass ToastRef {\n  /** The instance of component opened into the toast. */\n\n  /** Count of duplicates of this toast */\n\n  /** Subject for notifying the user that the toast has finished closing. */\n\n  /** triggered when toast is activated */\n\n  /** notifies the toast that it should close before the timeout */\n\n  /** notifies the toast that it should reset the timeouts */\n\n  /** notifies the toast that it should count a duplicate toast */\n  constructor(_overlayRef) {\n    _defineProperty(this, \"_overlayRef\", void 0);\n\n    _defineProperty(this, \"componentInstance\", void 0);\n\n    _defineProperty(this, \"duplicatesCount\", 0);\n\n    _defineProperty(this, \"_afterClosed\", new Subject());\n\n    _defineProperty(this, \"_activate\", new Subject());\n\n    _defineProperty(this, \"_manualClose\", new Subject());\n\n    _defineProperty(this, \"_resetTimeout\", new Subject());\n\n    _defineProperty(this, \"_countDuplicate\", new Subject());\n\n    this._overlayRef = _overlayRef;\n  }\n\n  manualClose() {\n    this._manualClose.next();\n\n    this._manualClose.complete();\n  }\n\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n\n\n  close() {\n    this._overlayRef.detach();\n\n    this._afterClosed.next();\n\n    this._manualClose.next();\n\n    this._afterClosed.complete();\n\n    this._manualClose.complete();\n\n    this._activate.complete();\n\n    this._resetTimeout.complete();\n\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n\n\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n\n\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n\n\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n\n}\n/**\n * Everything a toast needs to launch\n */\n\n\nclass ToastPackage {\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    _defineProperty(this, \"toastId\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"toastType\", void 0);\n\n    _defineProperty(this, \"toastRef\", void 0);\n\n    _defineProperty(this, \"_onTap\", new Subject());\n\n    _defineProperty(this, \"_onAction\", new Subject());\n\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n\n\n  triggerTap() {\n    this._onTap.next();\n\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n\n\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n\n  onAction() {\n    return this._onAction.asObservable();\n  }\n\n}\n\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing'\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\n\nclass DomPortalHost extends BasePortalHost {\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n\n    _defineProperty(this, \"_hostDomElement\", void 0);\n\n    _defineProperty(this, \"_componentFactoryResolver\", void 0);\n\n    _defineProperty(this, \"_appRef\", void 0);\n\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n\n\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\n    let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n\n    componentRef = componentFactory.create(portal.injector); // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n\n      componentRef.destroy();\n    }); // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n\n\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n\n}\n/** Container inside which all toasts will render. */\n\n\nclass OverlayContainer {\n  constructor() {\n    _defineProperty(this, \"_document\", inject(DOCUMENT));\n\n    _defineProperty(this, \"_containerElement\", void 0);\n  }\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body\n   * and 'aria-live=\"polite\"'\n   */\n\n\n  _createContainer() {\n    const container = this._document.createElement('div');\n\n    container.classList.add('overlay-container');\n    container.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\n_defineProperty(OverlayContainer, \"\\u0275fac\", function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)();\n});\n\n_defineProperty(OverlayContainer, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalHost) {\n    _defineProperty(this, \"_portalHost\", void 0);\n\n    this._portalHost = _portalHost;\n  }\n\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n\n\n  detach() {\n    return this._portalHost.detach();\n  }\n\n}\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n\n\nclass Overlay {\n  constructor() {\n    _defineProperty(this, \"_overlayContainer\", inject(OverlayContainer));\n\n    _defineProperty(this, \"_componentFactoryResolver\", inject(ComponentFactoryResolver));\n\n    _defineProperty(this, \"_appRef\", inject(ApplicationRef));\n\n    _defineProperty(this, \"_document\", inject(DOCUMENT));\n\n    _defineProperty(this, \"_paneElements\", new Map());\n  }\n\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass, overlayContainer) {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass = '', overlayContainer) {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(positionClass, overlayContainer) {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n\n\n  _createPortalHost(pane) {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n\n\n  _createOverlayRef(pane) {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n\n}\n\n_defineProperty(Overlay, \"\\u0275fac\", function Overlay_Factory(t) {\n  return new (t || Overlay)();\n});\n\n_defineProperty(Overlay, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac,\n  providedIn: 'root'\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass ToastrService {\n  constructor(token, overlay, _injector, sanitizer, ngZone) {\n    _defineProperty(this, \"overlay\", void 0);\n\n    _defineProperty(this, \"_injector\", void 0);\n\n    _defineProperty(this, \"sanitizer\", void 0);\n\n    _defineProperty(this, \"ngZone\", void 0);\n\n    _defineProperty(this, \"toastrConfig\", void 0);\n\n    _defineProperty(this, \"currentlyActive\", 0);\n\n    _defineProperty(this, \"toasts\", []);\n\n    _defineProperty(this, \"overlayContainer\", void 0);\n\n    _defineProperty(this, \"previousToastMessage\", void 0);\n\n    _defineProperty(this, \"index\", 0);\n\n    this.overlay = overlay;\n    this._injector = _injector;\n    this.sanitizer = sanitizer;\n    this.ngZone = ngZone;\n    this.toastrConfig = { ...token.default,\n      ...token.config\n    };\n\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = { ...token.default.iconClasses,\n        ...token.config.iconClasses\n      };\n    }\n  }\n  /** show toast */\n\n\n  show(message, title, override = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n\n\n  success(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n\n\n  error(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n\n\n  info(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n\n\n  warning(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n\n\n  clear(toastId) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n\n\n  remove(toastId) {\n    const found = this._findToast(toastId);\n\n    if (!found) {\n      return false;\n    }\n\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Determines if toast message is already shown\n   */\n\n\n  findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n    const {\n      includeTitleDuplicates\n    } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n  /** create a clone of global config and apply individual settings */\n\n\n  applyConfig(override = {}) {\n    return { ...this.toastrConfig,\n      ...override\n    };\n  }\n  /**\n   * Find toast object by id\n   */\n\n\n  _findToast(toastId) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return {\n          index: i,\n          activeToast: this.toasts[i]\n        };\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n\n\n  _preBuildNotification(toastType, message, title, config) {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n\n    return this._buildNotification(toastType, message, title, config);\n  }\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n\n\n  _buildNotification(toastType, message, title, config) {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    } // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n\n\n    const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n\n    if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage = message;\n\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n    /** New injector that contains an instance of `ToastPackage`. */\n\n    const providers = [{\n      provide: ToastPackage,\n      useValue: toastPackage\n    }];\n    const toastInjector = Injector.create({\n      providers,\n      parent: this._injector\n    });\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, config.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n\n}\n\n_defineProperty(ToastrService, \"\\u0275fac\", function ToastrService_Factory(t) {\n  return new (t || ToastrService)(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n});\n\n_defineProperty(ToastrService, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ToastrService,\n  factory: ToastrService.ɵfac,\n  providedIn: 'root'\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TOAST_CONFIG]\n      }]\n    }, {\n      type: Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.DomSanitizer\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass Toast {\n  /** width of progress bar */\n\n  /** a combination of toast type and options.toastClass */\n\n  /** controls animation */\n\n  /** hides component when waiting to be displayed */\n  get displayStyle() {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  constructor(toastrService, toastPackage, ngZone) {\n    _defineProperty(this, \"toastrService\", void 0);\n\n    _defineProperty(this, \"toastPackage\", void 0);\n\n    _defineProperty(this, \"ngZone\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"duplicatesCount\", void 0);\n\n    _defineProperty(this, \"originalTimeout\", void 0);\n\n    _defineProperty(this, \"width\", -1);\n\n    _defineProperty(this, \"toastClasses\", '');\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"timeout\", void 0);\n\n    _defineProperty(this, \"intervalId\", void 0);\n\n    _defineProperty(this, \"hideTime\", void 0);\n\n    _defineProperty(this, \"sub\", void 0);\n\n    _defineProperty(this, \"sub1\", void 0);\n\n    _defineProperty(this, \"sub2\", void 0);\n\n    _defineProperty(this, \"sub3\", void 0);\n\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.ngZone = ngZone;\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in'\n      }\n    };\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = { ...this.state,\n      value: 'active'\n    };\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state,\n      value: 'active'\n    };\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = { ...this.state,\n      value: 'removed'\n    };\n    this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n  }\n\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    if (this.options.disableTimeOut !== 'extendedTimeOut') {\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0; // disable progressBar\n\n      clearInterval(this.intervalId);\n      this.width = 0;\n    }\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n      return;\n    }\n\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  runInsideAngular(func) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n}\n\n_defineProperty(Toast, \"\\u0275fac\", function Toast_Factory(t) {\n  return new (t || Toast)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.NgZone));\n});\n\n_defineProperty(Toast, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Toast,\n  selectors: [[\"\", \"toast-component\", \"\"]],\n  hostVars: 5,\n  hostBindings: function Toast_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n        return ctx.tapToast();\n      })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n        return ctx.stickAround();\n      })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n        return ctx.delayedHideToast();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx.state);\n      i0.ɵɵclassMap(ctx.toastClasses);\n      i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n    }\n  },\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  attrs: _c0,\n  decls: 5,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n  template: function Toast_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0);\n      i0.ɵɵtemplate(1, Toast_div_1_Template, 3, 5, \"div\", 1);\n      i0.ɵɵtemplate(2, Toast_div_2_Template, 1, 3, \"div\", 2);\n      i0.ɵɵtemplate(3, Toast_div_3_Template, 2, 4, \"div\", 3);\n      i0.ɵɵtemplate(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n    }\n  },\n  dependencies: [NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('flyInOut', [state('inactive', style({\n      opacity: 0\n    })), state('active', style({\n      opacity: 1\n    })), state('removed', style({\n      opacity: 0\n    })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n  }\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Toast, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n      animations: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])],\n      preserveWhitespaces: false,\n      standalone: true,\n      imports: [NgIf]\n    }]\n  }], function () {\n    return [{\n      type: ToastrService\n    }, {\n      type: ToastPackage\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    state: [{\n      type: HostBinding,\n      args: ['@flyInOut']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultGlobalConfig = { ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\n\nconst provideToastr = (config = {}) => {\n  const providers = [{\n    provide: TOAST_CONFIG,\n    useValue: {\n      default: DefaultGlobalConfig,\n      config\n    }\n  }];\n  return makeEnvironmentProviders(providers);\n};\n\nclass ToastrModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [provideToastr(config)]\n    };\n  }\n\n}\n\n_defineProperty(ToastrModule, \"\\u0275fac\", function ToastrModule_Factory(t) {\n  return new (t || ToastrModule)();\n});\n\n_defineProperty(ToastrModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastrModule\n}));\n\n_defineProperty(ToastrModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Toast],\n      exports: [Toast]\n    }]\n  }], null, null);\n})();\n\nclass ToastrComponentlessModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoComponentGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\n_defineProperty(ToastrComponentlessModule, \"\\u0275fac\", function ToastrComponentlessModule_Factory(t) {\n  return new (t || ToastrComponentlessModule)();\n});\n\n_defineProperty(ToastrComponentlessModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastrComponentlessModule\n}));\n\n_defineProperty(ToastrComponentlessModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrComponentlessModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\nclass ToastNoAnimation {\n  /** width of progress bar */\n\n  /** a combination of toast type and options.toastClass */\n\n  /** hides component when waiting to be displayed */\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n  /** controls animation */\n\n\n  constructor(toastrService, toastPackage, appRef) {\n    _defineProperty(this, \"toastrService\", void 0);\n\n    _defineProperty(this, \"toastPackage\", void 0);\n\n    _defineProperty(this, \"appRef\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"duplicatesCount\", void 0);\n\n    _defineProperty(this, \"originalTimeout\", void 0);\n\n    _defineProperty(this, \"width\", -1);\n\n    _defineProperty(this, \"toastClasses\", '');\n\n    _defineProperty(this, \"state\", 'inactive');\n\n    _defineProperty(this, \"timeout\", void 0);\n\n    _defineProperty(this, \"intervalId\", void 0);\n\n    _defineProperty(this, \"hideTime\", void 0);\n\n    _defineProperty(this, \"sub\", void 0);\n\n    _defineProperty(this, \"sub1\", void 0);\n\n    _defineProperty(this, \"sub2\", void 0);\n\n    _defineProperty(this, \"sub3\", void 0);\n\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.appRef = appRef;\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = 'active';\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n  }\n\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0; // disable progressBar\n\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n}\n\n_defineProperty(ToastNoAnimation, \"\\u0275fac\", function ToastNoAnimation_Factory(t) {\n  return new (t || ToastNoAnimation)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n});\n\n_defineProperty(ToastNoAnimation, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ToastNoAnimation,\n  selectors: [[\"\", \"toast-component\", \"\"]],\n  hostVars: 4,\n  hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n        return ctx.tapToast();\n      })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n        return ctx.stickAround();\n      })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n        return ctx.delayedHideToast();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.toastClasses);\n      i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n    }\n  },\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  attrs: _c0,\n  decls: 5,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n  template: function ToastNoAnimation_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0);\n      i0.ɵɵtemplate(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1);\n      i0.ɵɵtemplate(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2);\n      i0.ɵɵtemplate(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3);\n      i0.ɵɵtemplate(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n    }\n  },\n  dependencies: [NgIf],\n  encapsulation: 2\n}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimation, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n      standalone: true,\n      imports: [NgIf]\n    }]\n  }], function () {\n    return [{\n      type: ToastrService\n    }, {\n      type: ToastPackage\n    }, {\n      type: i0.ApplicationRef\n    }];\n  }, {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultNoAnimationsGlobalConfig = { ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation\n};\n\nclass ToastNoAnimationModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoAnimationsGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\n_defineProperty(ToastNoAnimationModule, \"\\u0275fac\", function ToastNoAnimationModule_Factory(t) {\n  return new (t || ToastNoAnimationModule)();\n});\n\n_defineProperty(ToastNoAnimationModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastNoAnimationModule\n}));\n\n_defineProperty(ToastNoAnimationModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ToastNoAnimation],\n      exports: [ToastNoAnimation]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };","map":{"version":3,"names":["i0","Directive","InjectionToken","inject","Injectable","ComponentFactoryResolver","ApplicationRef","SecurityContext","Injector","Inject","Component","HostBinding","HostListener","makeEnvironmentProviders","NgModule","trigger","state","style","transition","animate","DOCUMENT","NgIf","Subject","i2","ToastContainerDirective","constructor","el","getContainerElement","nativeElement","ElementRef","type","args","selector","exportAs","standalone","ComponentPortal","component","injector","attach","host","newestOnTop","_attachedHost","detach","undefined","isAttached","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","ToastRef","_overlayRef","manualClose","_manualClose","next","complete","manualClosed","asObservable","timeoutReset","_resetTimeout","countDuplicate","_countDuplicate","close","_afterClosed","_activate","afterClosed","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","duplicatesCount","ToastPackage","toastId","config","message","title","toastType","toastRef","subscribe","_onAction","_onTap","triggerTap","tapToDismiss","onTap","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","ngOnDestroy","_containerElement","parentNode","removeChild","_createContainer","container","_document","createElement","classList","add","setAttribute","body","providedIn","OverlayRef","_portalHost","Overlay","Map","overlayContainer","_createOverlayRef","getPaneElement","_paneElements","get","set","_createPaneElement","pane","id","_overlayContainer","_createPortalHost","ToastrService","token","overlay","_injector","sanitizer","ngZone","toastrConfig","default","show","override","_preBuildNotification","applyConfig","clear","toast","toasts","remove","found","_findToast","activeToast","splice","index","currentlyActive","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","previousToastMessage","keepInactive","overlayRef","sanitizedMessage","sanitize","HTML","toastPackage","providers","provide","useValue","toastInjector","parent","componentInstance","instance","ins","onShown","onHidden","setTimeout","push","DomSanitizer","NgZone","decorators","Toast","displayStyle","value","toastrService","options","originalTimeout","toastClasses","sub","activateToast","sub1","sub2","sub3","count","params","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","outsideTimeout","hideTime","Date","getTime","outsideInterval","updateProgress","width","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","opacity","template","animations","preserveWhitespaces","imports","DefaultGlobalConfig","provideToastr","ToastrModule","forRoot","ngModule","exports","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"sources":["E:/saurabh-GIT/Task 9 CarPool/carpool/CarPoolUI/ClientApp/node_modules/ngx-toastr/fesm2022/ngx-toastr.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, Component, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\n\nclass ToastContainerDirective {\n    el;\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastContainerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.1\", type: ToastContainerDirective, isStandalone: true, selector: \"[toastContainer]\", exportAs: [\"toastContainer\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastContainerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[toastContainer]',\n                    exportAs: 'toastContainer',\n                    standalone: true\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    _attachedHost;\n    /** The type of the component that will be instantiated for attachment. */\n    component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalHost.\n     * The origin necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef;\n    /** Injector used for the instantiation of the component. */\n    injector;\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    /** The portal currently attached to the host. */\n    _attachedPortal;\n    /** A function that will permanently dispose this host. */\n    _disposeFn;\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    _overlayRef;\n    /** The instance of component opened into the toast. */\n    componentInstance;\n    /** Count of duplicates of this toast */\n    duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n    _afterClosed = new Subject();\n    /** triggered when toast is activated */\n    _activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n    _manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n    _resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n    _countDuplicate = new Subject();\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    toastId;\n    config;\n    message;\n    title;\n    toastType;\n    toastRef;\n    _onTap = new Subject();\n    _onAction = new Subject();\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    _hostDomElement;\n    _componentFactoryResolver;\n    _appRef;\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    _document = inject(DOCUMENT);\n    _containerElement;\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        container.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: OverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    _portalHost;\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    _overlayContainer = inject(OverlayContainer);\n    _componentFactoryResolver = inject(ComponentFactoryResolver);\n    _appRef = inject(ApplicationRef);\n    _document = inject(DOCUMENT);\n    // Namespace panes by overlay container\n    _paneElements = new Map();\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: Overlay, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: Overlay, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass ToastrService {\n    overlay;\n    _injector;\n    sanitizer;\n    ngZone;\n    toastrConfig;\n    currentlyActive = 0;\n    toasts = [];\n    overlayContainer;\n    previousToastMessage;\n    index = 0;\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.toastrConfig = {\n            ...token.default,\n            ...token.config,\n        };\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = {\n                ...token.default.iconClasses,\n                ...token.config.iconClasses,\n            };\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return { ...this.toastrConfig, ...override };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        /** New injector that contains an instance of `ToastPackage`. */\n        const providers = [{ provide: ToastPackage, useValue: toastPackage }];\n        const toastInjector = Injector.create({ providers, parent: this._injector });\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, config.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrService, deps: [{ token: TOAST_CONFIG }, { token: Overlay }, { token: i0.Injector }, { token: i2.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TOAST_CONFIG]\n                }] }, { type: Overlay }, { type: i0.Injector }, { type: i2.DomSanitizer }, { type: i0.NgZone }]; } });\n\nclass Toast {\n    toastrService;\n    toastPackage;\n    ngZone;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = -1;\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    /** controls animation */\n    state;\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state.value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n        this.state = {\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in',\n            },\n        };\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = { ...this.state, value: 'active' };\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n            this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = { ...this.state, value: 'active' };\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = { ...this.state, value: 'removed' };\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        if (this.options.disableTimeOut !== 'extendedTimeOut') {\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width = 0;\n        }\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state.value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: Toast, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.1\", type: Toast, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"@flyInOut\": \"this.state\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('flyInOut', [\n                state('inactive', style({ opacity: 0 })),\n                state('active', style({ opacity: 1 })),\n                state('removed', style({ opacity: 0 })),\n                transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n            ]),\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: Toast, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n                    animations: [\n                        trigger('flyInOut', [\n                            state('inactive', style({ opacity: 0 })),\n                            state('active', style({ opacity: 1 })),\n                            state('removed', style({ opacity: 0 })),\n                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n                        ]),\n                    ],\n                    preserveWhitespaces: false,\n                    standalone: true,\n                    imports: [NgIf],\n                }]\n        }], ctorParameters: function () { return [{ type: ToastrService }, { type: ToastPackage }, { type: i0.NgZone }]; }, propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], state: [{\n                type: HostBinding,\n                args: ['@flyInOut']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nconst DefaultGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: Toast,\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n    const providers = [\n        {\n            provide: TOAST_CONFIG,\n            useValue: {\n                default: DefaultGlobalConfig,\n                config,\n            }\n        }\n    ];\n    return makeEnvironmentProviders(providers);\n};\n\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [provideToastr(config)],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrModule, imports: [Toast], exports: [Toast] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Toast],\n                    exports: [Toast],\n                }]\n        }] });\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrComponentlessModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrComponentlessModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrComponentlessModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastrComponentlessModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\nclass ToastNoAnimation {\n    toastrService;\n    toastPackage;\n    appRef;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = -1;\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state === 'inactive') {\n            return 'none';\n        }\n    }\n    /** controls animation */\n    state = 'inactive';\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = 'active';\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = 'active';\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = 'removed';\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastNoAnimation, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.1\", type: ToastNoAnimation, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastNoAnimation, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n                    standalone: true,\n                    imports: [NgIf]\n                }]\n        }], ctorParameters: function () { return [{ type: ToastrService }, { type: ToastPackage }, { type: i0.ApplicationRef }]; }, propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\nconst DefaultNoAnimationsGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: ToastNoAnimation,\n};\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastNoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastNoAnimationModule, imports: [ToastNoAnimation], exports: [ToastNoAnimation] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastNoAnimationModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: ToastNoAnimationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ToastNoAnimation],\n                    exports: [ToastNoAnimation],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}